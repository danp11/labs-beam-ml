#!/usr/bin/env python3
# -*- mode: python -*-
# -*- coding: utf-8 -*-

##
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Run a python server to execute 

Usage:
  lucidoitdoit [--verbose] server [--host=<ip:port>] [--multi]
  lucidoitdoit [--verbose] client [--host=<ip:port>] <CODE> <INPUT>... [--shutdown]
  lucidoitdoit (-h | --help)
  lucidoitdoit --version

Options:
  -h --help         Show this screen.
  --version         Show version.
  --host=<ip:port>  Host for the server [default: 127.0.0.1:60986].
  --verbose         Log more information while running.
  --shutdown        Request a shutdown after the client has finished running.
  --multi           Run the server in multi-threaded mode (EXPERIMENTAL).
  <CODE>            A (potentially multi-line) block of code to run over the inputs.
  <INPUT>           A list of input records as strings.

Examples:

lucidoitdoit server --host :50008

  Runs a server on the 50008 port of the local machine (on all IP addresses)

lucidoitdoit client --host :50008 'output = input.upper().split(" ")' "a B" c

  Executes the code on the server and returns three lines: A, B and C

"""
import logging
import socket
import sys
import traceback

from docopt import docopt

import lucidoitdoit
import lucidoitdoit.frame


def main(opts: dict) -> None:
    # Common options
    if opts["--verbose"]:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    logging.debug("docopts: %s", str(opts))
    host_and_port = opts["--host"].split(":", 2)
    host = host_and_port[0]
    port = int(host_and_port[1] if len(host_and_port) > 1 else 0)

    # Specific commands
    if opts["server"]:
        if opts["--multi"]:
            lucidoitdoit.LuciDoItServer(host, port).run_multi()
        else:
            lucidoitdoit.LuciDoItServer(host, port).run()

    elif opts["client"]:
        if port == 0:
            raise Exception("No port specified.")

        code = opts.get("<CODE>")
        input = opts.get("<INPUT>")
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((host, port))
            logging.info("Connected: %s", s.getsockname())

            # Send the code once
            s.sendall(bytes([0]))
            lucidoitdoit.frame.LuciFrame.write_framed_binary(s, code.encode("utf-8"))
            id = lucidoitdoit.frame.LuciFrame.read_framed_binary(s)

            # Send all of the inputs
            for msg in input:
                s.sendall(bytes([1]))
                lucidoitdoit.frame.LuciFrame.write_framed_binary(s, id)
                lucidoitdoit.frame.LuciFrame.write_framed_binary(s, msg.encode("utf-8"))
                # Receive all of the outputs.
                while True:
                    (code, payload) = lucidoitdoit.frame.LuciFrame.read_coded_binary(s)
                    if code == -1:
                        break
                    logging.info(payload.decode("utf-8"))

            if opts["--shutdown"]:
                s.sendall(bytes([2]))


if __name__ == '__main__':
    try:
        main(docopt(__doc__, version='0.1'))
    except Exception as e:
        print(__doc__)
        print(e)
        print("-" * 60)
        traceback.print_exc(file=sys.stdout)
